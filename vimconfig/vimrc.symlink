" Preamble {{{
    " This is my personal vimrc file. I created this vimrc getting inspiration
    " from many resources. Here are some docs, tutorials and examplary
    " vimrc files:
    " http://vimcasts.org/
    " http://learnvimscriptthehardway.stevelosh.com/
    " http://benmccormick.org/2014/07/14/learning-vim-in-2014-configuring-vim/
    " http://vi-improved.org/
    " https://github.com/spf13/spf13-vim
    " https://bitbucket.org/Haroogan/vim-configuration/src
    " http://vim.wikia.com/wiki/Vim_Tips_Wiki
    " Last but definitely not least  :help

    " Please copy only the parts you understand what they do.
    " Gokhan Karabulut <gokhanettin@gmail.com>
" }}}

" Preliminaries {{{
    set nocompatible " Be iMproved, must be the first line. Required by Vundle

    " Are we running on windows ?
    let s:running_windows = has("win32") || has("win64")

    " Are we running in a colorful terminal ?
    " Does &term have 'xterm' or 'screen' patterns ?
    let s:colorful_term = (&term =~ "xterm") || (&term =~ "screen")

" }}}

" Functions {{{
    function! s:SafeExecute(command)
        " Save search register
        let l:search = @/

        " Save current position
        let l:position = getpos('.')

        " Save view
        let l:view = winsaveview()

        execute a:command

        " Restore view
        call winrestview(l:view)

        " Restore position
        call setpos('.', l:position)

        " Restore search
        let @/ = l:search
    endfunction


    function! RemoveWhiteBOB()
        " Use Very magic see vimscript regular expression.
        " http://learnvimscriptthehardway.stevelosh.com/chapters/31.html
        " Remove whitespaces from the beginning of the buffer
        call s:SafeExecute('%s/\v%^(\s*$\n=)+//e')
    endfunction


    function! RemoveWhiteEOL()
        " Remove whitespaces from the end of the lines
        call s:SafeExecute('%s/\v\s+$//e')
    endfunction

    function! RemoveWhiteEOB()
        " Remove whitespaces from the end of the buffer
         call s:SafeExecute('%s/\v(\s*$\n=)+%$//e')
    endfunction

    function! RemoveWhite()
        call RemoveWhiteBOB()
        call RemoveWhiteEOL()
        call RemoveWhiteEOB()
    endfunction
" }}}

" Platform Compatibility {{{
    " Detects unix, dos, mac file formats in that order
    " New files are unix
    set fileformats=unix,dos,mac

    " Don't convert back slashes to forward slashes while expanding
    set noshellslash

    if s:running_windows
        " Remove default paths
        set runtimepath-=$VIM/vimfiles
        set runtimepath-=$VIM/vimfiles/after
        set runtimepath-=~/vimfiles
        set runtimepath-=~/vimfiles/after

        " Add our paths
        set runtimepath^=~\.vim       " Prepend
        set runtimepath+=~\.vim\after " Append
    endif
" }}}

" Encoding {{{
" http://vim.wikia.com/wiki/Working_with_Unicode
    if has("multi_byte")
        if &termencoding == ""
            let &termencoding = &encoding
        endif
        set encoding=utf-8
        setglobal fileencoding=utf-8
        set fileencodings=ucs-bom,utf-8,latin1
    endif
" }}}

" Get Plugins through Vundle {{{
    filetype off     " Required
    set rtp+=$HOME/.vim/bundle/Vundle.vim
    call vundle#begin()

    Plugin 'gmarik/Vundle.vim' " Let Vundle manage Vundle, required

    "
    " List all plugins below
    "
    " Themes {{{
        Plugin 'chriskempson/base16-vim'
        Plugin 'tomasr/molokai'
    " }}}

    " Syntax {{{
        " Markdown syntax highlighting
        Plugin 'tpope/vim-markdown'
    " }}}

    " Search {{{
        " ctrlp is a fuzzy search plugin
        Plugin 'kien/ctrlp.vim'

        " Nerdtree is a file explorer
        Plugin 'scrooloose/nerdtree'

        " Silver search (ag) plugin
        " ag must be installed manually
        Plugin 'rking/ag.vim'

        " Matching text, character using %
        Plugin 'matchit.zip'

        " Requires Exuberant CTags binaries
        " Put 'ctags' folder in home
        Plugin 'majutsushi/tagbar'

        " Simple way to use motions
        " Plugin 'Lokaltog/vim-easymotion'
    " }}}

    " Editing {{{
        " Syntastic provides syntax info
        Plugin 'scrooloose/syntastic'

        " Smart completion of braces, parensthesis etc...
        Plugin 'Raimondi/delimitMate'

        " Surround things with braces, tags etc...
        Plugin 'tpope/vim-surround'

        " Allows user-defined commands to be used with . command
        Plugin 'tpope/vim-repeat'

        " Provides easy shortcuts for commenting out lines
        Plugin 'scrooloose/nerdcommenter'

        " Autocompletion
        Plugin 'Valloric/YouCompleteMe'

        " Ultimate solution for snippets under Vim.
        Plugin 'SirVer/ultisnips'
        Plugin 'honza/vim-snippets'

        " Vim script for text filtering and alignment
        Plugin 'godlygeek/tabular'

        " Useful to create neat tables as you type
        Plugin 'dhruvasagar/vim-table-mode'

        " Sublime Text style multiple selections
        Plugin 'terryma/vim-multiple-cursors'
    " }}}

    " Apperance {{{
        " Lean & mean status/tabline for vim that's light as air.
        Plugin 'bling/vim-airline'

        " Allows for different situational Vim themes
        " Plugin 'reedes/vim-thematic'
    " }}}

    " Extra {{{
        " Lots of useful key mappings
        Plugin 'tpope/vim-unimpaired'

        " Fugitive provides git bindings in Vim.
        Plugin 'tpope/vim-fugitive'

        " Shows a git diff in the 'gutter' (sign column)
        " Fights with Syntastic for the gutter
        " Plugin 'airblade/vim-gitgutter'
    "}}}

    call vundle#end()               " Required
    filetype plugin indent on       " Required
" }}}

" Look & Feel {{{
    syntax on
    syntax enable
    if has('gui_running')

        " Console dialogs instead of popups for simple choices
        set guioptions=c

        if has('gui_win32')
            let &guifont = 'DejaVu Sans Mono for Powerline:h11'
        elseif has('gui_gtk')
            let &guifont = 'DejaVu Sans Mono for Powerline 11'
        endif

        set background=dark
        colorscheme molokai
    elseif s:running_windows && !empty($CONEMUBUILD)
        if has("builtin_terms")
            " Set term to xterm for ConEmu or Cmder
            set term=xterm
            set t_Co=256
            let &t_AB="\e[48;5;%dm"
            let &t_AF="\e[38;5;%dm"
            set background=dark
            colorscheme molokai
        endif
    elseif s:colorful_term && !s:running_windows
        set t_Co=256
        let &t_AB="\e[48;5;%dm"
        let &t_AF="\e[38;5;%dm"
        set background=dark
        colorscheme molokai
    endif

    " Let airline handle the mode display
    set noshowmode

    " Show line numbers
    set number

    " Always show status line
    set laststatus=2

    " Disable cursor blinking
    set guicursor=a:blinkon0


    " Opens vertical split right of current window
    set splitright

    " Opens horizontal split below current window
    set splitbelow

    " Use short messages when interacting with user. See :help shortmess
    set shortmess=a

    " Folds are closed by default
    set foldlevelstart=0

    " Each succesive tab press cycles through these modes
    set wildmode=longest,list,full

    " Completion with menu
    set wildmenu

    " Stuff to ignore when tab completing
    set wildignore=*.o,*.obj,*~

    " Highlights the current line
    set cursorline

    " Enables the mouse in all modes
    set mouse=a

    " Hides the mouse cursor while typing
    set mousehide

    " This changes the default display of tab and CR chars in list mode
    set listchars=tab:→\ ,eol:¬
    " Set the command window height to 2 lines, to avoid many cases of having
    " to press <Enter> to continue
    set cmdheight=2

    " Don't make noise on errors, no bell, no visual
    set noerrorbells visualbell t_vb=
    autocmd GUIEnter * set visualbell t_vb=

    " Eliminate redundant redraws
    set lazyredraw
" }}}

" Navigation {{{
    " Buffers can exist in the background
    set hidden

    " Keep some lines visible when we are close to vertical margins
    set scrolloff=10

    " Keep some columns visible when we are close to horizontal margins
    set sidescrolloff=5

    " Useful for selecting a rectangle in Visual block mode
    set virtualedit=block
" }}}

" Search {{{
    " Hight search
    set hlsearch

    " Incremental search as you type
    set incsearch

    " Case insesitive search
    set ignorecase

    " Smart search, case sensitive, when an upper case typed.
    set smartcase

    " Wrap again when we hit the last match item while searching
    set wrapscan
" }}}

" Editing {{{
    " Allow backspace in insert mode
    set backspace=indent,eol,start

    " Reload files changed outside vim
    set autoread

    " Time out on mappings after timeoutlen, time out on key codes after
    " ttimeoutlen
    set timeout timeoutlen=2000 ttimeoutlen=200

    " Use <F12> to toggle between 'paste' and 'nopaste'
    set pastetoggle=<F12>

    if has('clipboard')
        if has('unnamedplus')  " In case of xterm_clipboard
            set clipboard=unnamed,unnamedplus
        else
            set clipboard=unnamed
        endif
    endif
" }}}

" Indentation {{{
    " Number of spaces a tab counts for
    set tabstop=4

    " Spaces for autoindents
    set shiftwidth=4

    " Tab spaces to be inserted when hit
    set softtabstop=4

    " Makes indenting a multiple of shiftwidth
    set shiftround

    " Turn a tab into spaces
    set expandtab

    " On new lines, match indent of previous line
    set autoindent

    " Copy the previous indentation on autoindenting
    set copyindent
" }}}

" History {{{
    " Store lots of cmdline history
    set history=1000

    " Use many undo levels
    set undolevels=1000
" }}}

" Wrap {{{
    " Enforce line length
    set textwidth=79

    " Highlight the limit of textwidth
    set colorcolumn=+1

    " Long lines
    set wrap
" }}}

" Backup {{{
    " No backup~ files
    set nobackup
" }}}

" Swap {{{
    " No swap files
    set noswapfile
" }}}

" Mappings {{{
    " Space is the <Leader>
    let mapleader=" "

    " Dash is the localleader
    let maplocalleader='-'

    " Let K be the opposite of J
    nnoremap K i<CR><Esc>

    " Map Y to act like D and C, i.e. to yank until EOL, rather than act
    " as yy, which is the default
    nnoremap Y y$

    " Quickly edit/reload the vimrc file
    nnoremap <silent> <Leader>ev :vsplit $MYVIMRC<CR>
    nnoremap <silent> <Leader>sv :so $MYVIMRC<CR>

    " Temporarily get out of search highlight
    nnoremap <silent> <CR> :nohlsearch<CR><CR>

    " Change the size of splits and vsplits easily
    nnoremap <silent> <Up>    :exe "resize +" . 5<CR>
    nnoremap <silent> <Down>  :exe "resize -" . 5<CR>
    nnoremap <silent> <Right> :exe "vertical resize +" . 5<CR>
    nnoremap <silent> <Left>  :exe "vertical resize -" . 5<CR>
    inoremap <silent> <Up>    <Esc>:exe "resize +" . 5<CR>
    inoremap <silent> <Down>  <Esc>:exe "resize -" . 5<CR>
    inoremap <silent> <Right> <Esc>:exe "vertical resize +" . 5<CR>
    inoremap <silent> <Left>  <Esc>:exe "vertical resize -" . 5<CR>

    " Jump to screen row rather than file line, if wrap enabled.
    nnoremap j gj
    nnoremap k gk

    " Easy navigation with splits
    nnoremap <C-k> <C-w>k
    nnoremap <C-j> <C-w>j
    nnoremap <C-h> <C-w>h
    nnoremap <C-l> <C-w>l

    " Leave insert mode with jk
    inoremap jk <Esc>
" }}}

" Hooks {{{
    augroup general
        autocmd!
        " Open quickfix when grep issued.
        autocmd QuickFixCmdPost *grep* cwindow
    augroup END
" }}}

" Configurations {{{

    " ctrlp {{{
if isdirectory(expand('~/.vim/bundle/ctrlp.vim'))
    " Start ctrlp in mixed mode
    nnoremap <silent> <F4> :CtrlPMRU<CR>

    " 1-) Nearest repo
    " 2-) Directory of the current file
    let g:ctrlp_working_path_mode = 'rc'

    " Check if we have a fast search tool, if we don't, then
    " use `dir` for Windows, `find`for others.
    if executable('ag')
        " https://news.ycombinator.com/item?id=5245578
        let s:fallback = 'ag --nogroup --nobreak --noheading --nocolor -g "" %s'

        " Following doesn't seem to be working on Windows.
        " Produces strange regular expression error.
        " let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'

        " ag should be fast enough, we don't need caching
        let g:ctrlp_use_caching = 0
    elseif executable('ack-grep')
        let s:fallback = 'ack-grep %s --nocolor -f'
    elseif executable('ack')
        let s:fallback = 'ack %s --nocolor -f'
    else
        if (has('win32') || has('win64'))
            let s:fallback = 'dir %s /-n /b /s /a-d'
        else
            let s:fallback = 'find %s -type f'
        endif
    endif

    " Use search tool of a version control system if exists,
    " they are supposed to faster even ag
    " otherwise use fallback as user command
    let g:ctrlp_user_command = {
        \ 'types': {
            \ 1: ['.git', 'cd %s && git ls-files . ' .
            \     '--cached --exclude-standard --others'],
            \ 2: ['.hg', 'hg --cwd %s locate -I .'],
        \ },
        \ 'fallback': s:fallback
    \ }

    " Available ctrp extensions go below.
    
    endif
    " }}}
    
    " nerdtree {{{
    if isdirectory(expand('~/.vim/bundle/nerdtree'))
        " Start NERDTree
        nnoremap <silent> <F2> :NERDTreeToggle<CR>

        " Find current file on NERDTree
        nnoremap <Leader>nf :NERDTreeFind<CR>

        " Ignore according to wildignore
        let g:NERDTreeRespectWildIgnore = 1

        " Also ignore these
        let g:NERDTreeIgnore = ['^\.$', '^\.\.$']

        " Show hidden files
        let g:NERDTreeShowHidden = 1

        " Custom bookmark file
        let g:NERDTreeBookmarksFile = expand('~/.cache/NERDTree/bookmarks')

        " Show bookmarks
        let g:NERDTreeShowBookmarks = 1

        " Change CWD according to the root of the tree
        let g:NERDTreeChDirMode = 2
    endif
    " }}}

    " syntastic {{{
    if isdirectory(expand('~/.vim/bundle/syntastic'))
        let g:syntastic_error_symbol = '✗'
        let g:syntastic_warning_symbol = '⚠'
        let g:syntastic_always_populate_loc_list = 1
        let g:syntastic_python_checkers = ['flake8']
        " let g:syntastic_python_flake8_args = ''
        let g:syntastic_mode_map = {
        \   'mode'              : 'active',
        \   'active_filetypes'  : [],
        \   'passive_filetypes' : ['html']
        \ }
    endif
    " }}}

    " youcompleteme {{{
    if isdirectory(expand('~/.vim/bundle/YouCompleteMe'))
        nnoremap <silent> <Leader>gt :YcmCompleter GoTo<CR>
        nnoremap <silent> <Leader>gc :YcmCompleter GoToDeclaration<CR>
        nnoremap <silent> <Leader>gf :YcmCompleter GoToDefinition<CR>

        " Strange, but YCM's <C-Space> doesn't work with Cmder,
        " Trigger omni-completion pop-up menu with this mapping.
        inoremap <C-Space> <C-x><C-o>

        let g:ycm_filetype_whitelist = { '*': 1 }
        let g:ycm_filetype_blacklist = {
                \ 'tagbar' : 1,
                \ 'qf' : 1,
                \ 'notes' : 1,
                \ 'unite' : 1,
                \ 'text' : 1,
                \ 'vimwiki' : 1,
                \ 'infolog' : 1,
                \ 'mail' : 1
                \}

        " The listed filetypes will be ignored by the YCM semantic completion 
        " engine, but the identifier-based completion engine will still trigger
        " in files of those filetypes.
        let g:ycm_filetype_specific_completion_to_disable = {
            \ 'gitcommit': 1,
            \ 'markdown': 1,
            \ 'pandoc': 1
            \}

        " let g:ycm_confirm_extra_conf = 0
        let g:ycm_complete_in_comments = 1
        let g:ycm_autoclose_preview_window_after_insertion = 1
        " let g:ycm_autoclose_preview_window_after_completion = 1
    endif
    " }}}

    " ultisnips {{{
    if isdirectory(expand('~/.vim/bundle/ultisnips'))
        " Trigger configuration.  Don't use tab, we are using YCM
        let g:UltiSnipsExpandTrigger="<C-s>"
        let g:UltiSnipsJumpForwardTrigger="<C-f>"
        let g:UltiSnipsJumpBackwardTrigger="<C-b>"

        " Register the author
        let g:snips_author = 'Gokhan Karabulut <xgeekonx@gmail.com>'

        " Custom snippet folder, :UltiSnipsEdit will open the files in this directory.
        let g:UltiSnipsSnippetsDir = '~/.vim/snippets/MyUltiSnips'

        " If you want :UltiSnipsEdit to split your window.
        let g:UltiSnipsEditSplit="vertical"
    endif
    " }}}

    " vim-airline {{{
    if isdirectory(expand('~/.vim/bundle/vim-airline'))
        let g:airline_powerline_fonts=1
        " let g:airline_detect_whitespace=0
        let g:airline#extensions#tabline#enabled = 0
        let g:airline_theme = "tomorrow"
    endif
    " }}}

    " vim-unimpaired {{{
    if isdirectory(expand('~/.vim/bundle/vim-unimpaired'))
        " Unimpaired custom mappings
        nmap <A-k> [e
        nmap <A-j> ]e
        vmap <A-k> [egv
        vmap <A-j> ]egv
    endif
    " }}}

    " tabular {{{
    if isdirectory(expand('~/.vim/bundle/tabular'))
        " http://vimcasts.org/episodes/aligning-text-with-tabular-vim/
        " https://gist.github.com/tpope/287147
        nmap <silent> <Leader>a= :Tabularize /=<CR>
        vmap <silent> <Leader>a= :Tabularize /=<CR>
        nmap <silent> <Leader>a: :Tabularize /:\zs<CR>
        vmap <silent> <Leader>a: :Tabularize /:\zs<CR>

        " Commented out, in favor of dhruvasagar/vim-table-mode plugin
        " inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
        " function! s:align()
            " let p = '^\s*|\s.*\s|\s*$'
            " if exists(':Tabularize') && getline('.') =~# '^\s*|' &&
                        " \ (getline(line('.')-1) =~# p ||
                        " \ getline(line('.')+1) =~# p)
                " let column = strlen(substitute(
                            " \ getline('.')[0:col('.')],'[^|]','','g'))
                " let position = strlen(matchstr(
                            " \ getline('.')[0:col('.')],'.*|\s*\zs.*'))
                " Tabularize/|/l1
                " normal! 0
                " call search(repeat('[^|]*|',column).'\s\{-\}'.
                            " \ repeat('.',position),'ce',line('.'))
            " endif
        " endfunction
    endif
    " }}}

    " ag {{{
    if executable('ag')
            " Change vim's external grep program.
            set grepprg=ag\ --nogroup\ --nocolor\ --column
            set grepformat=%f:%l:%c:%m

        if isdirectory(expand('~/.vim/bundle/ag.vim'))
            " ag.vim plugin setup
            let g:ag_prg    = "ag --nogroup --nocolor --column"
            let g:ag_format = "%f:%l:%c:%m"
        endif
    endif
    " }}}

    " vim-fugitive {{{
    if isdirectory(expand('~/.vim/bundle/vim-fugitive.vim'))
        augroup fugitive
            autocmd!
            " Prevent buffer listing from becoming swamped with fugitive buffers.
            autocmd BufReadPost fugitive://* set bufhidden=delete
        augroup END
    endif
    " }}}

    " nerdcommenter {{{
    if isdirectory(expand('~/.vim/bundle/nerdcommenter'))
        let NERDSpaceDelims=1
    endif
    " }}}

    " tagbar {{{
    if isdirectory(expand('~/.vim/bundle/tagbar'))
        nnoremap <silent> <F3> :TagbarToggle<CR>
        if !executable('ctags')
            let g:tagbar_ctags_bin = expand("~") . '/ctags/ctags'
        endif
    endif
    " }}}
" }}}

" Modeline {{{
    " vim: set sw=4 ts=4 sts=4 et tw=78 foldlevel=0 foldmethod=marker:
" }}}
